package de.adis_portal.server.reporting.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportExecutionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportExecutionAllPropertiesEquals(ReportExecution expected, ReportExecution actual) {
        assertReportExecutionAutoGeneratedPropertiesEquals(expected, actual);
        assertReportExecutionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportExecutionAllUpdatablePropertiesEquals(ReportExecution expected, ReportExecution actual) {
        assertReportExecutionUpdatableFieldsEquals(expected, actual);
        assertReportExecutionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportExecutionAutoGeneratedPropertiesEquals(ReportExecution expected, ReportExecution actual) {}

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportExecutionUpdatableFieldsEquals(ReportExecution expected, ReportExecution actual) {
        assertThat(expected)
            .as("Verify ReportExecution relevant properties")
            .satisfies(e -> assertThat(e.getRid()).as("check rid").isEqualTo(actual.getRid()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getError()).as("check error").isEqualTo(actual.getError()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()))
            .satisfies(e -> assertThat(e.getAdditionalInfo()).as("check additionalInfo").isEqualTo(actual.getAdditionalInfo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportExecutionUpdatableRelationshipsEquals(ReportExecution expected, ReportExecution actual) {
        assertThat(expected)
            .as("Verify ReportExecution relationships")
            .satisfies(e -> assertThat(e.getReport()).as("check report").isEqualTo(actual.getReport()));
    }
}
