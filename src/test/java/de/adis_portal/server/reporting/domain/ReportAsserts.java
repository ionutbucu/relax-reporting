package de.adis_portal.server.reporting.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllPropertiesEquals(Report expected, Report actual) {
        assertReportAutoGeneratedPropertiesEquals(expected, actual);
        assertReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllUpdatablePropertiesEquals(Report expected, Report actual) {
        assertReportUpdatableFieldsEquals(expected, actual);
        assertReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAutoGeneratedPropertiesEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableFieldsEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getQuery()).as("check query").isEqualTo(actual.getQuery()))
            .satisfies(e -> assertThat(e.getQueryType()).as("check queryType").isEqualTo(actual.getQueryType()))
            .satisfies(e -> assertThat(e.getFileName()).as("check fileName").isEqualTo(actual.getFileName()))
            .satisfies(e -> assertThat(e.getReportType()).as("check reportType").isEqualTo(actual.getReportType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableRelationshipsEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report relationships")
            .satisfies(e -> assertThat(e.getDatasource()).as("check datasource").isEqualTo(actual.getDatasource()))
            .satisfies(e -> assertThat(e.getMetadata()).as("check metadata").isEqualTo(actual.getMetadata()));
    }
}
